{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the nomad-battery-database documentation \u00b6 A NOMAD plugin for parsing and visualizing curated/extracted experimental battery properties from the literature. Introduction \u00b6 This battery database plugin allows you to parse structured YAML or CSV files containing battery material properties and visualize them through a dedicated application within NOMAD. It automatically extracts key performance indicators like capacity, voltage, and energy density, links them to their source publications, and provides interactive plots and filters for easy data exploration. This is crucial for building a comprehensive and searchable database of battery materials to accelerate research and development. Tutorial \u00b6 A step-by-step guide to preparing your data, uploading it to NOMAD, and exploring it using the battery app. Tutorial How-to guides \u00b6 Step-by-step instructions for common tasks related to the plugin. How to Upload Custom Battery Data Search through the Battery Database Install this plugin Prepare and upload data Contribute to this plugin Contribute to the documentation Explanation \u00b6 Background and technical details on how the plugin works. Plugin Explanation Reference \u00b6 Detailed reference for the data schema used by the plugin. Schema Reference","title":"Home"},{"location":"index.html#welcome-to-the-nomad-battery-database-documentation","text":"A NOMAD plugin for parsing and visualizing curated/extracted experimental battery properties from the literature.","title":"Welcome to the nomad-battery-database documentation"},{"location":"index.html#introduction","text":"This battery database plugin allows you to parse structured YAML or CSV files containing battery material properties and visualize them through a dedicated application within NOMAD. It automatically extracts key performance indicators like capacity, voltage, and energy density, links them to their source publications, and provides interactive plots and filters for easy data exploration. This is crucial for building a comprehensive and searchable database of battery materials to accelerate research and development.","title":"Introduction"},{"location":"index.html#tutorial","text":"A step-by-step guide to preparing your data, uploading it to NOMAD, and exploring it using the battery app. Tutorial","title":"Tutorial"},{"location":"index.html#how-to-guides","text":"Step-by-step instructions for common tasks related to the plugin. How to Upload Custom Battery Data Search through the Battery Database Install this plugin Prepare and upload data Contribute to this plugin Contribute to the documentation","title":"How-to guides"},{"location":"index.html#explanation","text":"Background and technical details on how the plugin works. Plugin Explanation","title":"Explanation"},{"location":"index.html#reference","text":"Detailed reference for the data schema used by the plugin. Schema Reference","title":"Reference"},{"location":"explanation/explanation.html","text":"Explanation \u00b6 This section provides background on the plugin's design and functionality. Parser Logic \u00b6 The BatteryParser is the core component responsible for reading your data files and populating the schema. File Matching ( does_match ) : The parser first checks if a file is likely to contain battery data. For .yaml / .yml files, it looks for the presence of characteristic keys like Extracted_name: and DOI: . For .csv files, it checks the header row for columns like Name, and Capacity_Raw_value, . This ensures that the parser only attempts to process relevant files. Data Ingestion : Tables (CSV/XLSX) : The parser reads the table row by row. Each row is treated as a separate NOMAD entry. It maps column headers (e.g., Capacity_Raw_value ) to the schema attributes (e.g., capacity_raw_value ) using the _col_to_attr function, which handles case-insensitivity and aliases. YAML : It loads the YAML file. If the file is a dictionary, it creates a single entry. If it's a list of dictionaries, it creates one entry for each item in the list. Value Cleaning ( _safe_float ) : Raw data files often contain non-numeric characters or multiple values in a single cell (e.g., \"217 mAhg-1\"). This function robustly extracts the first valid floating-point number from a string. Schema and Normalization \u00b6 The BatteryDatabase class in battery_schema.py defines the structure of the data. The normalize method is a special function that NOMAD calls after a parser has finished. It is used to clean, augment, and standardize the data. Chemical Formula Derivation : The raw Extracted_name (e.g., [{'Cu': '1.0', 'O': '1.0'}] ) is parsed to generate a standard Hill-ordered chemical formula ( CuO ). This standardized formula is crucial for searching and filtering. It also populates the elements and elemental_composition fields in the NOMAD results section, which powers the periodic table widget. Unit Handling : The schema defines standard units for key quantities (e.g., capacity in mA*hour/g ). The normalizer copies the raw values (like capacity_raw_value ) to the standardized fields ( capacity ) and attempts to parse the raw unit string. Publication Linking : If a DOI is provided, the normalizer automatically creates a PublicationReference section, which allows NOMAD to fetch bibliographic details and link to the original paper (Base feature in Nomad). available_properties : To make filtering easier, the normalizer checks which quantitative properties (Capacity, Voltage, etc.) are present in the entry and generates a human-readable string (e.g., \"Capacity and Voltage\"). This string is then used to create a filter in the GUI. (we are trying to create better filters for according to your need, feel free to provide feed back if any important features are missing.)","title":"Explanation"},{"location":"explanation/explanation.html#explanation","text":"This section provides background on the plugin's design and functionality.","title":"Explanation"},{"location":"explanation/explanation.html#parser-logic","text":"The BatteryParser is the core component responsible for reading your data files and populating the schema. File Matching ( does_match ) : The parser first checks if a file is likely to contain battery data. For .yaml / .yml files, it looks for the presence of characteristic keys like Extracted_name: and DOI: . For .csv files, it checks the header row for columns like Name, and Capacity_Raw_value, . This ensures that the parser only attempts to process relevant files. Data Ingestion : Tables (CSV/XLSX) : The parser reads the table row by row. Each row is treated as a separate NOMAD entry. It maps column headers (e.g., Capacity_Raw_value ) to the schema attributes (e.g., capacity_raw_value ) using the _col_to_attr function, which handles case-insensitivity and aliases. YAML : It loads the YAML file. If the file is a dictionary, it creates a single entry. If it's a list of dictionaries, it creates one entry for each item in the list. Value Cleaning ( _safe_float ) : Raw data files often contain non-numeric characters or multiple values in a single cell (e.g., \"217 mAhg-1\"). This function robustly extracts the first valid floating-point number from a string.","title":"Parser Logic"},{"location":"explanation/explanation.html#schema-and-normalization","text":"The BatteryDatabase class in battery_schema.py defines the structure of the data. The normalize method is a special function that NOMAD calls after a parser has finished. It is used to clean, augment, and standardize the data. Chemical Formula Derivation : The raw Extracted_name (e.g., [{'Cu': '1.0', 'O': '1.0'}] ) is parsed to generate a standard Hill-ordered chemical formula ( CuO ). This standardized formula is crucial for searching and filtering. It also populates the elements and elemental_composition fields in the NOMAD results section, which powers the periodic table widget. Unit Handling : The schema defines standard units for key quantities (e.g., capacity in mA*hour/g ). The normalizer copies the raw values (like capacity_raw_value ) to the standardized fields ( capacity ) and attempts to parse the raw unit string. Publication Linking : If a DOI is provided, the normalizer automatically creates a PublicationReference section, which allows NOMAD to fetch bibliographic details and link to the original paper (Base feature in Nomad). available_properties : To make filtering easier, the normalizer checks which quantitative properties (Capacity, Voltage, etc.) are present in the entry and generates a human-readable string (e.g., \"Capacity and Voltage\"). This string is then used to create a filter in the GUI. (we are trying to create better filters for according to your need, feel free to provide feed back if any important features are missing.)","title":"Schema and Normalization"},{"location":"how_to/contribute_to_the_documentation.html","text":"How to Contribute to the Documentation \u00b6 Good documentation is essential. If you find any part of the documentation unclear, incorrect, or missing information, please consider contributing. The documentation is written in Markdown and located in the docs/ directory of the project repository. Making Changes \u00b6 Follow the development workflow described in How to Contribute to this Plugin to set up your local repository. Navigate to the docs/ directory. Edit the relevant Markdown files. You can add new pages, update existing content, or fix typos. Preview your changes locally if possible. Commit and push your changes , then open a Pull Request with a clear description of the improvements you've made. If you are adding a new page, remember to link it from the appropriate section in the main index.md file.","title":"Contribute to the documentation"},{"location":"how_to/contribute_to_the_documentation.html#how-to-contribute-to-the-documentation","text":"Good documentation is essential. If you find any part of the documentation unclear, incorrect, or missing information, please consider contributing. The documentation is written in Markdown and located in the docs/ directory of the project repository.","title":"How to Contribute to the Documentation"},{"location":"how_to/contribute_to_the_documentation.html#making-changes","text":"Follow the development workflow described in How to Contribute to this Plugin to set up your local repository. Navigate to the docs/ directory. Edit the relevant Markdown files. You can add new pages, update existing content, or fix typos. Preview your changes locally if possible. Commit and push your changes , then open a Pull Request with a clear description of the improvements you've made. If you are adding a new page, remember to link it from the appropriate section in the main index.md file.","title":"Making Changes"},{"location":"how_to/contribute_to_this_plugin.html","text":"How to Contribute to this Plugin \u00b6 Contributions are very welcome! Whether you're fixing a bug, adding a new feature, or improving documentation, your help is very much appreciated. Development Workflow \u00b6 Fork the repository on GitHub. Clone your fork locally: git clone https://github.com/YOUR_USERNAME/Battery-Database.git cd Battery-Database Set up a development environment. It is highly recommended to install the plugin using destro in editable mode within your NOMAD environment: git submodule add https://github.com/u-gajera/Battery-Database.git uv add packages/nomad-battery-database Make your changes. Implement your new feature or bug fix. Add tests for your changes to ensure they work as expected and don't break existing functionality. Run tests to make sure everything is passing. Commit your changes with a clear and descriptive message. Push your branch to your fork on GitHub: git push origin feature/my-new-feature Open a Pull Request from your branch to the main branch of the original repository. Provide a detailed description of your changes in the PR.","title":"Contribute to this plugin"},{"location":"how_to/contribute_to_this_plugin.html#how-to-contribute-to-this-plugin","text":"Contributions are very welcome! Whether you're fixing a bug, adding a new feature, or improving documentation, your help is very much appreciated.","title":"How to Contribute to this Plugin"},{"location":"how_to/contribute_to_this_plugin.html#development-workflow","text":"Fork the repository on GitHub. Clone your fork locally: git clone https://github.com/YOUR_USERNAME/Battery-Database.git cd Battery-Database Set up a development environment. It is highly recommended to install the plugin using destro in editable mode within your NOMAD environment: git submodule add https://github.com/u-gajera/Battery-Database.git uv add packages/nomad-battery-database Make your changes. Implement your new feature or bug fix. Add tests for your changes to ensure they work as expected and don't break existing functionality. Run tests to make sure everything is passing. Commit your changes with a clear and descriptive message. Push your branch to your fork on GitHub: git push origin feature/my-new-feature Open a Pull Request from your branch to the main branch of the original repository. Provide a detailed description of your changes in the PR.","title":"Development Workflow"},{"location":"how_to/how_to_add_own_batterydata.html","text":"How to Add Your Own Battery Data \u00b6 You can contribute your own experimental or computational battery data to NOMAD. By creating a new entry and using the built-in Battery schema, you can ensure your data is correctly formatted and discoverable through the Battery Database application. This guide will walk you through the process of creating a new entry and populating it with your data. Step 1: Create a New Upload \u00b6 Navigate to the PUBLISH menu in the top-left corner of the NOMAD interface and select Your uploads . On the uploads page, you can either add files (yaml format) to an existing upload or create a new one. Click the CREATE A NEW UPLOAD button to start a new, unpublished upload session. (Image: The \"Your uploads\" page showing the \"CREATE A NEW UPLOAD\" button.) This will take you to a new \"unnamed upload\" page where you can add your data. (Image: The new \"unnamed upload\" page interface.) Step 2: Create an Entry from the Battery Schema \u00b6 Instead of uploading a file, you can create a new entry directly in the browser using a predefined schema. In the \"Prepare and upload your files\" section, click the CREATE FROM SCHEMA button. A dialog box titled \"Create new entry from schema\" will appear. Name of the entry : Provide a descriptive name for your battery data entry (e.g., MyTIO2_Battery_Test ). Select a schema : Ensure the Built-in schema option is selected. In the search box, type Battery to find the correct schema. Select ChemDataExtractorBattery from the list. Click CREATE . (Image: The \"Create new entry from schema\" dialog, with \"Battery\" selected.) Step 3: Add Battery Properties \u00b6 After creating the entry, you will be directed to the DATA tab. This is where you will input the specific properties of your battery material. On the left-hand side, navigate to the data section within the EntryArchive . Fill in the quantitative properties for your material. You can specify the value and the correct unit for each field: capacity voltage coulombic efficiency energy density conductivity material name (Image: The data entry fields for battery properties.) Step 4: Define the Material using the Component System \u00b6 To define the chemical components of your material, you can add a PureSubstanceComponent section. This allows you to specify detailed chemical information for better data integration. Within your entry's data section, add a new subsection for defining the material's components. Select the PureSubstanceComponent to describe a single chemical substance. In this section, you can provide detailed information about the material, such as: substance name : The common name of the material (e.g., Titanium dioxide ). cas number : The CAS registry number. pub chem link : A direct URL to the PubChem entry. iupac name , molecular formula , molecular mass , etc. This structured data is crucial for making your entry easy to find, filter, and compare with other materials in the database. (Image: Detailed view of the PureSubstanceComponent section with various chemical identifiers.) Step 5: Publish Your Data \u00b6 Once you have filled in all the relevant data, return to the main upload page for your \"unnamed upload\". Process data : Ensure the processing of your new entry is complete. Edit visibility and access : You can choose to make the data public or share it with specific users. To make it visible in the main database, you must enable public visibility. Publish : After reviewing your data and setting the access rights, click the Publish button to finalize the upload. After publishing, your data will be indexed and will become searchable and viewable within the Battery Database application. (Currently this feature is not yet available)","title":"How to upload custom battery data"},{"location":"how_to/how_to_add_own_batterydata.html#how-to-add-your-own-battery-data","text":"You can contribute your own experimental or computational battery data to NOMAD. By creating a new entry and using the built-in Battery schema, you can ensure your data is correctly formatted and discoverable through the Battery Database application. This guide will walk you through the process of creating a new entry and populating it with your data.","title":"How to Add Your Own Battery Data"},{"location":"how_to/how_to_add_own_batterydata.html#step-1-create-a-new-upload","text":"Navigate to the PUBLISH menu in the top-left corner of the NOMAD interface and select Your uploads . On the uploads page, you can either add files (yaml format) to an existing upload or create a new one. Click the CREATE A NEW UPLOAD button to start a new, unpublished upload session. (Image: The \"Your uploads\" page showing the \"CREATE A NEW UPLOAD\" button.) This will take you to a new \"unnamed upload\" page where you can add your data. (Image: The new \"unnamed upload\" page interface.)","title":"Step 1: Create a New Upload"},{"location":"how_to/how_to_add_own_batterydata.html#step-2-create-an-entry-from-the-battery-schema","text":"Instead of uploading a file, you can create a new entry directly in the browser using a predefined schema. In the \"Prepare and upload your files\" section, click the CREATE FROM SCHEMA button. A dialog box titled \"Create new entry from schema\" will appear. Name of the entry : Provide a descriptive name for your battery data entry (e.g., MyTIO2_Battery_Test ). Select a schema : Ensure the Built-in schema option is selected. In the search box, type Battery to find the correct schema. Select ChemDataExtractorBattery from the list. Click CREATE . (Image: The \"Create new entry from schema\" dialog, with \"Battery\" selected.)","title":"Step 2: Create an Entry from the Battery Schema"},{"location":"how_to/how_to_add_own_batterydata.html#step-3-add-battery-properties","text":"After creating the entry, you will be directed to the DATA tab. This is where you will input the specific properties of your battery material. On the left-hand side, navigate to the data section within the EntryArchive . Fill in the quantitative properties for your material. You can specify the value and the correct unit for each field: capacity voltage coulombic efficiency energy density conductivity material name (Image: The data entry fields for battery properties.)","title":"Step 3: Add Battery Properties"},{"location":"how_to/how_to_add_own_batterydata.html#step-4-define-the-material-using-the-component-system","text":"To define the chemical components of your material, you can add a PureSubstanceComponent section. This allows you to specify detailed chemical information for better data integration. Within your entry's data section, add a new subsection for defining the material's components. Select the PureSubstanceComponent to describe a single chemical substance. In this section, you can provide detailed information about the material, such as: substance name : The common name of the material (e.g., Titanium dioxide ). cas number : The CAS registry number. pub chem link : A direct URL to the PubChem entry. iupac name , molecular formula , molecular mass , etc. This structured data is crucial for making your entry easy to find, filter, and compare with other materials in the database. (Image: Detailed view of the PureSubstanceComponent section with various chemical identifiers.)","title":"Step 4: Define the Material using the Component System"},{"location":"how_to/how_to_add_own_batterydata.html#step-5-publish-your-data","text":"Once you have filled in all the relevant data, return to the main upload page for your \"unnamed upload\". Process data : Ensure the processing of your new entry is complete. Edit visibility and access : You can choose to make the data public or share it with specific users. To make it visible in the main database, you must enable public visibility. Publish : After reviewing your data and setting the access rights, click the Publish button to finalize the upload. After publishing, your data will be indexed and will become searchable and viewable within the Battery Database application. (Currently this feature is not yet available)","title":"Step 5: Publish Your Data"},{"location":"how_to/install_this_plugin.html","text":"Install This Plugin \u00b6 Add This Plugin to Your NOMAD installation \u00b6 Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.","title":"Install this Plugin"},{"location":"how_to/install_this_plugin.html#install-this-plugin","text":"","title":"Install This Plugin"},{"location":"how_to/install_this_plugin.html#add-this-plugin-to-your-nomad-installation","text":"Read the NOMAD plugin documentation for all details on how to deploy the plugin on your NOMAD instance.","title":"Add This Plugin to Your NOMAD installation"},{"location":"how_to/search_data_in_app.html","text":"Searching and Exploring Battery Data \u00b6 The NOMAD Battery Materials Plugin provides a powerful, dedicated search and visualization interface to help you explore the curated battery materials data. This application is specifically designed to work with entries that conform to the ChemDataExtractorBattery schema. Accessing the Battery Database App \u00b6 You can find the dedicated search page in the NOMAD UI by navigating to the Explore menu and selecting Battery Database under the USE CASES section, as highlighted below. This will take you to the homepage for the battery database. The page provides an interactive environment composed of three main components, as seen in the screenshot below: Filter Panel : On the left, a set of filters to narrow down your search. Interactive Dashboard : At the top, a series of plots and widgets that visualize the data from your current search results. Results Table : At the bottom, a detailed, sortable table of all entries matching your search criteria. \u00b6 Key Features of the Search Interface \u00b6 1. Filtering Your Data \u00b6 The left-hand menu provides several filters to refine your search based on specific metadata and properties. Material : Filter entries by their Hill-ordered chemical formula . An input box allows you to type in a specific formula to search for. Journal : Find data from specific scientific journals. An input box helps you search for a journal by name. Publication Year : Filter entries by the year of publication. Available Properties : Select entries based on the quantitative properties they contain, such as \"Capacity,\" \"Voltage,\" or a combination like \"Capacity and Voltage.\" Specifier : Filter by the property specifier, which provides context for a measurement (e.g., discharge capacity , theoretical capacity ). Tag : Filter by the data origin tag (e.g., CDE for data from ChemDataExtractor, Calculated for derived data). 2. Visualizing Data with the Dashboard \u00b6 The dashboard offers several interactive widgets that update automatically as you filter your data. Periodic Table ( Elements present in selected entries ) : This widget highlights the chemical elements that are present in the materials from your current search results. Property Distribution Histograms : A series of histograms show the distribution of key quantitative properties across the selected entries: Capacity distribution (in mAh/g) Voltage distribution (in V) Coulombic Efficiency distribution Conductivity distribution Energy-density distribution (in Wh/kg) Scatter Plot ( Voltage vs Capacity ) : This plot visualizes the relationship between voltage and capacity, helping you identify trends and compare different materials at a glance. 3. The Results Table \u00b6 The table at the bottom of the page displays detailed information for each entry that matches your filters. You can click on any column header to sort the results. The following columns are available: Column Header Description Shown by Default Material The name of the battery material. \u2705 Journal The journal where the data was published. \u2705 Publication Year The year of publication. Capacity The specific capacity in mA*hour/g . \u2705 Open-circuit voltage The open-circuit voltage in V . \u2705 Coulombic efficiency The Coulombic efficiency (dimensionless). \u2705 Energy density The energy density in W*hour/kg . \u2705 Conductivity The material's conductivity. \u2705 Formula (Hill) The chemical formula in Hill notation. Entry ID The unique identifier for the NOMAD entry. Upload time The date and time the entry was uploaded. You can customize the visible columns by using the column selection tool on the right side of the table header. Example Use Case \u00b6 Imagine you want to find all carbon-based material with a capacity greater than 500 mAh/g reported in the Journal of Power Sources . Filter by Journal : In the \"Journal\" filter on the left, type Journal of Power Sources and select it. Filter by Material : In the \"Material\" filter, you could type C to see materials containing carbon. Filter by Property : Use the \"Capacity distribution\" histogram on the dashboard. Click and drag to select the range from 500 mAh/g to the maximum value. Analyze Results : The results table will now only show entries that match these criteria. You can sort the table by the \"Capacity\" column to find the material with the highest performance. The other dashboard widgets will update to show you the elemental distribution and voltage ranges for this specific subset of materials.","title":"How to search through battery database"},{"location":"how_to/search_data_in_app.html#searching-and-exploring-battery-data","text":"The NOMAD Battery Materials Plugin provides a powerful, dedicated search and visualization interface to help you explore the curated battery materials data. This application is specifically designed to work with entries that conform to the ChemDataExtractorBattery schema.","title":"Searching and Exploring Battery Data"},{"location":"how_to/search_data_in_app.html#accessing-the-battery-database-app","text":"You can find the dedicated search page in the NOMAD UI by navigating to the Explore menu and selecting Battery Database under the USE CASES section, as highlighted below. This will take you to the homepage for the battery database. The page provides an interactive environment composed of three main components, as seen in the screenshot below: Filter Panel : On the left, a set of filters to narrow down your search. Interactive Dashboard : At the top, a series of plots and widgets that visualize the data from your current search results. Results Table : At the bottom, a detailed, sortable table of all entries matching your search criteria.","title":"Accessing the Battery Database App"},{"location":"how_to/search_data_in_app.html#_1","text":"","title":""},{"location":"how_to/search_data_in_app.html#key-features-of-the-search-interface","text":"","title":"Key Features of the Search Interface"},{"location":"how_to/search_data_in_app.html#1-filtering-your-data","text":"The left-hand menu provides several filters to refine your search based on specific metadata and properties. Material : Filter entries by their Hill-ordered chemical formula . An input box allows you to type in a specific formula to search for. Journal : Find data from specific scientific journals. An input box helps you search for a journal by name. Publication Year : Filter entries by the year of publication. Available Properties : Select entries based on the quantitative properties they contain, such as \"Capacity,\" \"Voltage,\" or a combination like \"Capacity and Voltage.\" Specifier : Filter by the property specifier, which provides context for a measurement (e.g., discharge capacity , theoretical capacity ). Tag : Filter by the data origin tag (e.g., CDE for data from ChemDataExtractor, Calculated for derived data).","title":"1. Filtering Your Data"},{"location":"how_to/search_data_in_app.html#2-visualizing-data-with-the-dashboard","text":"The dashboard offers several interactive widgets that update automatically as you filter your data. Periodic Table ( Elements present in selected entries ) : This widget highlights the chemical elements that are present in the materials from your current search results. Property Distribution Histograms : A series of histograms show the distribution of key quantitative properties across the selected entries: Capacity distribution (in mAh/g) Voltage distribution (in V) Coulombic Efficiency distribution Conductivity distribution Energy-density distribution (in Wh/kg) Scatter Plot ( Voltage vs Capacity ) : This plot visualizes the relationship between voltage and capacity, helping you identify trends and compare different materials at a glance.","title":"2. Visualizing Data with the Dashboard"},{"location":"how_to/search_data_in_app.html#3-the-results-table","text":"The table at the bottom of the page displays detailed information for each entry that matches your filters. You can click on any column header to sort the results. The following columns are available: Column Header Description Shown by Default Material The name of the battery material. \u2705 Journal The journal where the data was published. \u2705 Publication Year The year of publication. Capacity The specific capacity in mA*hour/g . \u2705 Open-circuit voltage The open-circuit voltage in V . \u2705 Coulombic efficiency The Coulombic efficiency (dimensionless). \u2705 Energy density The energy density in W*hour/kg . \u2705 Conductivity The material's conductivity. \u2705 Formula (Hill) The chemical formula in Hill notation. Entry ID The unique identifier for the NOMAD entry. Upload time The date and time the entry was uploaded. You can customize the visible columns by using the column selection tool on the right side of the table header.","title":"3. The Results Table"},{"location":"how_to/search_data_in_app.html#example-use-case","text":"Imagine you want to find all carbon-based material with a capacity greater than 500 mAh/g reported in the Journal of Power Sources . Filter by Journal : In the \"Journal\" filter on the left, type Journal of Power Sources and select it. Filter by Material : In the \"Material\" filter, you could type C to see materials containing carbon. Filter by Property : Use the \"Capacity distribution\" histogram on the dashboard. Click and drag to select the range from 500 mAh/g to the maximum value. Analyze Results : The results table will now only show entries that match these criteria. You can sort the table by the \"Capacity\" column to find the material with the highest performance. The other dashboard widgets will update to show you the elemental distribution and voltage ranges for this specific subset of materials.","title":"Example Use Case"},{"location":"how_to/use_this_plugin.html","text":"How to Use the NOMAD Battery Materials Plugin \u00b6 This plugin provides a comprehensive toolkit for battery materials data. You can use it in two primary ways: to explore and visualize existing battery data through a dedicated application, or to contribute your own experimental or computational data to the database. 1. Exploring the Battery Database \u00b6 The plugin features a powerful search and visualization interface designed specifically for battery materials data. Access the App : To get started, navigate to the Explore menu in the NOMAD UI and select Battery Database under the USE CASES section. Search and Filter : The application allows you to narrow down searches using a variety of filters, including: Material (by chemical formula) Journal and Publication Year Available quantitative properties (e.g., \"Capacity\" or \"Voltage\") Visualize Data : An interactive dashboard automatically updates with your search results, offering several widgets for data visualization: A periodic table highlighting elements present in the results. Histograms showing the distribution of key properties like capacity, voltage, and energy density. A scatter plot of Voltage vs. Capacity to identify trends. Analyze Results : A detailed and sortable table at the bottom displays all entries matching your search criteria, with columns for material, capacity, voltage, and more. Additional Information can be found 2. Adding Your Own Data \u00b6 You can contribute your own battery data directly through the NOMAD interface by creating a new entry that conforms to the battery schema. Create a New Entry : Go to the PUBLISH menu and start a new upload. In the upload section, click the CREATE FROM SCHEMA button. Give your entry a name and select the ChemDataExtractorBattery schema from the built-in options. Add Data : Once the entry is created, navigate to the DATA tab. Fill in the relevant quantitative properties for your material, such as capacity , voltage , coulombic efficiency , energy density , and the material name . For better data integration, you can also define the material's chemical composition using the PureSubstanceComponent section. Publish : After entering all your data, return to the main upload page. Review your entry and click Publish to make your data public. Your contribution will then be indexed and discoverable within the Battery Database application. How to Upload Custom Battery Data","title":"Use this Plugin"},{"location":"how_to/use_this_plugin.html#how-to-use-the-nomad-battery-materials-plugin","text":"This plugin provides a comprehensive toolkit for battery materials data. You can use it in two primary ways: to explore and visualize existing battery data through a dedicated application, or to contribute your own experimental or computational data to the database.","title":"How to Use the NOMAD Battery Materials Plugin"},{"location":"how_to/use_this_plugin.html#1-exploring-the-battery-database","text":"The plugin features a powerful search and visualization interface designed specifically for battery materials data. Access the App : To get started, navigate to the Explore menu in the NOMAD UI and select Battery Database under the USE CASES section. Search and Filter : The application allows you to narrow down searches using a variety of filters, including: Material (by chemical formula) Journal and Publication Year Available quantitative properties (e.g., \"Capacity\" or \"Voltage\") Visualize Data : An interactive dashboard automatically updates with your search results, offering several widgets for data visualization: A periodic table highlighting elements present in the results. Histograms showing the distribution of key properties like capacity, voltage, and energy density. A scatter plot of Voltage vs. Capacity to identify trends. Analyze Results : A detailed and sortable table at the bottom displays all entries matching your search criteria, with columns for material, capacity, voltage, and more. Additional Information can be found","title":"1. Exploring the Battery Database"},{"location":"how_to/use_this_plugin.html#2-adding-your-own-data","text":"You can contribute your own battery data directly through the NOMAD interface by creating a new entry that conforms to the battery schema. Create a New Entry : Go to the PUBLISH menu and start a new upload. In the upload section, click the CREATE FROM SCHEMA button. Give your entry a name and select the ChemDataExtractorBattery schema from the built-in options. Add Data : Once the entry is created, navigate to the DATA tab. Fill in the relevant quantitative properties for your material, such as capacity , voltage , coulombic efficiency , energy density , and the material name . For better data integration, you can also define the material's chemical composition using the PureSubstanceComponent section. Publish : After entering all your data, return to the main upload page. Review your entry and click Publish to make your data public. Your contribution will then be indexed and discoverable within the Battery Database application. How to Upload Custom Battery Data","title":"2. Adding Your Own Data"},{"location":"reference/references.html","text":"Schema Reference \u00b6 This page details the schema quantities defined in nomad_battery_database.schema_packages.battery_schema.BatteryDatabase . The data we are publishing here is extracted by Chemdataextractor and this work has been done by https://doi.org/10.1038/s41597-020-00602-2 . Feel free to let us know if you find any descripancy with original data here. Core Information \u00b6 material_name (str): The common name or label for the material entry. extracted_name (str): A structured string representation of the chemical composition, e.g., [{'Li': '1'}, {'Fe': '1'}] . chemical_formula_hill (str): The Hill-ordered chemical formula derived from extracted_name . elements (list[str]): A list of elements present in the material. Bibliographic \u00b6 DOI (str): The Digital Object Identifier of the source publication. title (str): The title of the publication. journal (str): The name of the journal. publication_year (str): The year of publication, extracted from the publication date. publication (PublicationReference): A sub-section containing structured bibliographic data. Quantitative Properties \u00b6 For each property, there are typically three fields: 1. A \"raw value\" field (e.g., capacity_raw_value ) directly from the source file. 2. A \"raw unit\" field (e.g., capacity_raw_unit ). 3. A standardized field with a default (more standard) unit (e.g., capacity with unit mA*hour/g ). Capacity capacity_raw_value (float) capacity_raw_unit (str) capacity (float, unit: mA*hour/g ) Voltage voltage_raw_value (float) voltage_raw_unit (str) voltage (float, unit: V ) Coulombic Efficiency coulombic_efficiency_raw_value (float) coulombic_efficiency_raw_unit (str) coulombic_efficiency (float) Energy Density energy_density_raw_value (float) energy_density_raw_unit (str) energy_density (float, unit: W*hour/kg ) Conductivity conductivity_raw_value (float) conductivity_raw_unit (str) conductivity (float, unit: S/cm ) Metadata and Filtering \u00b6 available_properties (str): A human-readable summary of which quantitative properties are available for this entry (e.g., \"Capacity and Voltage\"). Used for filtering in the GUI. specifier (str): A term describing the experimental conditions (e.g., \"discharge capacity\"). tag (str): A general-purpose tag for categorization. info (str): Additional information about the measurement.","title":"Reference"},{"location":"reference/references.html#schema-reference","text":"This page details the schema quantities defined in nomad_battery_database.schema_packages.battery_schema.BatteryDatabase . The data we are publishing here is extracted by Chemdataextractor and this work has been done by https://doi.org/10.1038/s41597-020-00602-2 . Feel free to let us know if you find any descripancy with original data here.","title":"Schema Reference"},{"location":"reference/references.html#core-information","text":"material_name (str): The common name or label for the material entry. extracted_name (str): A structured string representation of the chemical composition, e.g., [{'Li': '1'}, {'Fe': '1'}] . chemical_formula_hill (str): The Hill-ordered chemical formula derived from extracted_name . elements (list[str]): A list of elements present in the material.","title":"Core Information"},{"location":"reference/references.html#bibliographic","text":"DOI (str): The Digital Object Identifier of the source publication. title (str): The title of the publication. journal (str): The name of the journal. publication_year (str): The year of publication, extracted from the publication date. publication (PublicationReference): A sub-section containing structured bibliographic data.","title":"Bibliographic"},{"location":"reference/references.html#quantitative-properties","text":"For each property, there are typically three fields: 1. A \"raw value\" field (e.g., capacity_raw_value ) directly from the source file. 2. A \"raw unit\" field (e.g., capacity_raw_unit ). 3. A standardized field with a default (more standard) unit (e.g., capacity with unit mA*hour/g ). Capacity capacity_raw_value (float) capacity_raw_unit (str) capacity (float, unit: mA*hour/g ) Voltage voltage_raw_value (float) voltage_raw_unit (str) voltage (float, unit: V ) Coulombic Efficiency coulombic_efficiency_raw_value (float) coulombic_efficiency_raw_unit (str) coulombic_efficiency (float) Energy Density energy_density_raw_value (float) energy_density_raw_unit (str) energy_density (float, unit: W*hour/kg ) Conductivity conductivity_raw_value (float) conductivity_raw_unit (str) conductivity (float, unit: S/cm )","title":"Quantitative Properties"},{"location":"reference/references.html#metadata-and-filtering","text":"available_properties (str): A human-readable summary of which quantitative properties are available for this entry (e.g., \"Capacity and Voltage\"). Used for filtering in the GUI. specifier (str): A term describing the experimental conditions (e.g., \"discharge capacity\"). tag (str): A general-purpose tag for categorization. info (str): Additional information about the measurement.","title":"Metadata and Filtering"},{"location":"tutorial/tutorial.html","text":"Tutorial: From Raw Data to Interactive Visualization \u00b6 This tutorial will guide you through the complete workflow of preparing experimental battery data, converting it into a NOMAD-compatible format, uploading it, and exploring it using the interactive GUI. We will use the utility scripts provided in the project to process the data. 1. Initial Data Format \u00b6 Let's assume your raw data is in a \"long\" CSV format, where each row represents a single property for a given material. This format is common for aggregating data from different sources (Format provided in the https://doi.org/10.1038/s41597-020-00602-2 paper). Create a file named raw_battery_data.csv with the following content: Name,Extracted_name,DOI,Specifier,Property,Value,Raw_value,Raw_unit,Unit 40-CuO / C,\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,discharge capacity,Capacity,217.0,217,mAhg\u22121,\"Gram^(-1.0) Hour(1.0) MilliAmpere(1.0)\" 40-CuO / C,\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,discharge voltage,Voltage,1.5,1.5,V,Volt(1.0) LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,charge capacity,Capacity,120.0,120,mAh/g,\"Gram^(-1.0) Hour(1.0) MilliAmpere(1.0)\" LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,charge voltage,Voltage,4.1,4.1,V,Volt(1.0) LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,efficiency,Coulombic_efficiency,98.5,98.5,%,Percent(1.0) 2. Pivoting the Data \u00b6 The NOMAD parser expects the data in a \"wide\" format, where each row contains all properties for a single material. We use the pivot_battery_data.py script to perform this transformation. Run the script: \u00b6 python pivot_battery_data.py --input_file raw_battery_data.csv --output_file pivoted.extracted_battery.csv This will create a new file, pivoted.extracted_battery.csv, with the following structure: Name,Extracted_name,DOI,Capacity_Value,Voltage_Value,Coulombic_efficiency_Value,... \"40-CuO / C\",\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,217.0,1.5,,... LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,120.0,4.1,98.5,... Note: The new pivoted script also pivots Raw_value, Raw_unit, and Unit columns. \u00b6 3. Splitting CSV into Individual YAML Entries \u00b6 If you feel comfortable with individual file, each material entry can be in its own file. This allows for independent processing and referencing. The parser is optimized for YAML files. We'll use the split_csv_to_yaml.py script. Run the script: \u00b6 python split_csv_to_yaml.py --csv pivoted.extracted_battery.csv --outdir entries This command will create an entries directory and populate it with YAML files, one for each row in the pivoted CSV. For example, entries/entry1.extracted_battery.yaml will contain: Name: 40-CuO / C Extracted_name: '[{''Cu'': ''1.0'', ''O'': ''1.0''}, {''C'': ''1.0''}]' DOI: 10.1039/C4NR06432A Specifier: discharge capacity Capacity_Value: 217.0 Capacity_Raw_value: 217.0 Capacity_Raw_unit: mAhg\u22121 Capacity_Unit: Gram^(-1.0) Hour(1.0) MilliAmpere(1.0) Voltage_Value: 1.5 Voltage_Raw_value: 1.5 Voltage_Raw_unit: V Voltage_Unit: Volt(1.0) 4. Uploading to NOMAD \u00b6 Now that the data is prepared, you can upload it to your NOMAD instance. Navigate to the UPLOAD page in NOMAD. Click the \"New Upload\" button. You can either drag-and-drop the entries directory (zipped) or select it using the file browser. Add a name for your upload (e.g., \"My Battery Data\" ) and click UPLOAD . NOMAD will automatically detect the csv/YAML files, match them to the battery parser, process them, and create the corresponding entries. ##### Note: It is important to have following extension in order to detect by Nomad: *.extracted_battery.csv or *..extracted_battery.yaml 5. Exploring the Data in the Battery App \u00b6 Once the processing is complete (the upload status will change from \"processing\" to \"finished\"), you can explore the data. Navigate to the EXPLORE page. From the \"Category\" dropdown, click on the Battery Database application. You will see a dashboard with: An interactive periodic table showing the elements present in your data. Histograms for the distribution of Capacity, Voltage, and other quantitative properties. A scatter plot of Voltage vs. Capacity. A results table showing key data for each entry. On the left-hand side as well as below, you can use the filters to narrow down your search, for example, by Journal , Publication Year , or Available Properties . This allows you to quickly find and compare the materials you are interested in.","title":"Tutorial"},{"location":"tutorial/tutorial.html#tutorial-from-raw-data-to-interactive-visualization","text":"This tutorial will guide you through the complete workflow of preparing experimental battery data, converting it into a NOMAD-compatible format, uploading it, and exploring it using the interactive GUI. We will use the utility scripts provided in the project to process the data.","title":"Tutorial: From Raw Data to Interactive Visualization"},{"location":"tutorial/tutorial.html#1-initial-data-format","text":"Let's assume your raw data is in a \"long\" CSV format, where each row represents a single property for a given material. This format is common for aggregating data from different sources (Format provided in the https://doi.org/10.1038/s41597-020-00602-2 paper). Create a file named raw_battery_data.csv with the following content: Name,Extracted_name,DOI,Specifier,Property,Value,Raw_value,Raw_unit,Unit 40-CuO / C,\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,discharge capacity,Capacity,217.0,217,mAhg\u22121,\"Gram^(-1.0) Hour(1.0) MilliAmpere(1.0)\" 40-CuO / C,\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,discharge voltage,Voltage,1.5,1.5,V,Volt(1.0) LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,charge capacity,Capacity,120.0,120,mAh/g,\"Gram^(-1.0) Hour(1.0) MilliAmpere(1.0)\" LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,charge voltage,Voltage,4.1,4.1,V,Volt(1.0) LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,efficiency,Coulombic_efficiency,98.5,98.5,%,Percent(1.0)","title":"1. Initial Data Format"},{"location":"tutorial/tutorial.html#2-pivoting-the-data","text":"The NOMAD parser expects the data in a \"wide\" format, where each row contains all properties for a single material. We use the pivot_battery_data.py script to perform this transformation.","title":"2. Pivoting the Data"},{"location":"tutorial/tutorial.html#run-the-script","text":"python pivot_battery_data.py --input_file raw_battery_data.csv --output_file pivoted.extracted_battery.csv This will create a new file, pivoted.extracted_battery.csv, with the following structure: Name,Extracted_name,DOI,Capacity_Value,Voltage_Value,Coulombic_efficiency_Value,... \"40-CuO / C\",\"[{'Cu': '1.0', 'O': '1.0'}, {'C': '1.0'}]\",10.1039/C4NR06432A,217.0,1.5,,... LixMn2O4,\"[{'Li': 'x', 'Mn': '2.0', 'O': '4.0'}]\",10.1016/j.jpowsour.2014.07.191,120.0,4.1,98.5,...","title":"Run the script:"},{"location":"tutorial/tutorial.html#note-the-new-pivoted-script-also-pivots-raw_value-raw_unit-and-unit-columns","text":"","title":"Note: The new pivoted script also pivots Raw_value, Raw_unit, and Unit columns."},{"location":"tutorial/tutorial.html#3-splitting-csv-into-individual-yaml-entries","text":"If you feel comfortable with individual file, each material entry can be in its own file. This allows for independent processing and referencing. The parser is optimized for YAML files. We'll use the split_csv_to_yaml.py script.","title":"3. Splitting CSV into Individual YAML Entries"},{"location":"tutorial/tutorial.html#run-the-script_1","text":"python split_csv_to_yaml.py --csv pivoted.extracted_battery.csv --outdir entries This command will create an entries directory and populate it with YAML files, one for each row in the pivoted CSV. For example, entries/entry1.extracted_battery.yaml will contain: Name: 40-CuO / C Extracted_name: '[{''Cu'': ''1.0'', ''O'': ''1.0''}, {''C'': ''1.0''}]' DOI: 10.1039/C4NR06432A Specifier: discharge capacity Capacity_Value: 217.0 Capacity_Raw_value: 217.0 Capacity_Raw_unit: mAhg\u22121 Capacity_Unit: Gram^(-1.0) Hour(1.0) MilliAmpere(1.0) Voltage_Value: 1.5 Voltage_Raw_value: 1.5 Voltage_Raw_unit: V Voltage_Unit: Volt(1.0)","title":"Run the script:"},{"location":"tutorial/tutorial.html#4-uploading-to-nomad","text":"Now that the data is prepared, you can upload it to your NOMAD instance. Navigate to the UPLOAD page in NOMAD. Click the \"New Upload\" button. You can either drag-and-drop the entries directory (zipped) or select it using the file browser. Add a name for your upload (e.g., \"My Battery Data\" ) and click UPLOAD . NOMAD will automatically detect the csv/YAML files, match them to the battery parser, process them, and create the corresponding entries. ##### Note: It is important to have following extension in order to detect by Nomad: *.extracted_battery.csv or *..extracted_battery.yaml","title":"4. Uploading to NOMAD"},{"location":"tutorial/tutorial.html#5-exploring-the-data-in-the-battery-app","text":"Once the processing is complete (the upload status will change from \"processing\" to \"finished\"), you can explore the data. Navigate to the EXPLORE page. From the \"Category\" dropdown, click on the Battery Database application. You will see a dashboard with: An interactive periodic table showing the elements present in your data. Histograms for the distribution of Capacity, Voltage, and other quantitative properties. A scatter plot of Voltage vs. Capacity. A results table showing key data for each entry. On the left-hand side as well as below, you can use the filters to narrow down your search, for example, by Journal , Publication Year , or Available Properties . This allows you to quickly find and compare the materials you are interested in.","title":"5. Exploring the Data in the Battery App"}]}